'''一、线程与进程
【串联和并发】多任务执行的方式，一个一个依次执行，称为【串联执行】。多个任务同时执行称为【并发执行】。串联执行占用资源小，耗时长。并发执行效率高，占用资源大。
【注】实际工作中处理多任务操作，采用串联与并发相结合的方式。即同一时间有有限个任务并发执行，更多的任务进入等待队列。“银行叫号”的执行方式。

【同步和异步】在程序执行过程中，有一个线程(一般是第一个，开机时就产生)，称为主线程，是程序运行伊始启动的线程，或者在应用层程序上，刷新UI的线程，
游戏中修改元素的坐标和大小的线程称为主线程。任何任务执行，在主线程中运行，使主线程进入阻塞，称为【同步任务】;凡在子线程中，执行，不导致主线程阻塞，称为【异步任务】

【线程与进程】进程就好比两个工厂(或者三个车间，四个生产机器)；线程是跑在进程之下的，一个进程可以有多个线程，线程就好比一个工厂的两条生产线；
创建线程有两种方式，一种是通过函数，即让每个线程执行一个函数，二是继承自官方的线程类，创建自己的线程类，执行该类的run方法

【注】进程与线程都是计算机并发执行任务的一种手段，原理都是时分复用(TDMA)
【注】两个进程不能访问同一个变量（内存区域），两个线程可以
【注】如果A进程创建B进程，则A是B的父进程，B是A的子进程。父进程被销毁，子进程会托管给操作系统的【根进程】。
【注】如果A线程创建B线程，则A是B的父线程，B是A的子线程。父线程被销毁，子线程也会跟着销毁。'''

'''【线程同步】多个线程并发执行任务，可能导致部分内存数据或者磁盘读写发生多线程同时操作，导致错误，因此需要线程同步'''

# 线程函数
import time
import _thread      # 服务于线程函数的模块


def print_hello_world(delay):
    while True:
        time.sleep(delay)
        print("hello world!")


def print_hello_univers(delay, word):
    while True:
        time.sleep(delay)
        print("hello univers!", word)


# 创建两个子线程
_thread.start_new_thread(print_hello_world, (1, ))  # 元组(1, )传参
_thread.start_new_thread(print_hello_univers, (2, "Do it!"))  # 元组(2, "Do it!")传参(delay, word)

# 主线程继续向下执行
# 主线程退出，子线程会销毁
# 所以试试将下面注掉后的运行结果

while True:
    pass            # pass是空语句，什么都不做，一直循环，主线程会一直执行下去，子线程也会存续下去

























